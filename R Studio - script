-----------------------------------------
title: Coursera Case Study: Cyclistic
author: Brian Truong
-----------------------------------------

  
## ================================
##  1. download required packages
## ================================
## tidyverse - data import and wrangling
## lubridate - date functions
## ggplot - visualization
## scales - visualization terms
 
install.packages("tidyverse")
install.packages("janitor")
install.packages("lubridate")

library("tidyverse")
library("janitor")
library("lubridate")
library("scales")


## ==================================================
##  2. upload last 12 months of Cyclistic trip data
## ==================================================

df1 <- read.csv("./Cyclistic Case Study - data/202105-divvy-tripdata.csv")
df2 <- read.csv("./Cyclistic Case Study - data/202106-divvy-tripdata.csv")
df3 <- read.csv("./Cyclistic Case Study - data/202107-divvy-tripdata.csv")
df4 <- read.csv("./Cyclistic Case Study - data/202108-divvy-tripdata.csv")
df5 <- read.csv("./Cyclistic Case Study - data/202109-divvy-tripdata.csv")
df6 <- read.csv("./Cyclistic Case Study - data/202110-divvy-tripdata.csv")
df7 <- read.csv("./Cyclistic Case Study - data/202111-divvy-tripdata.csv")
df8 <- read.csv("./Cyclistic Case Study - data/202112-divvy-tripdata.csv")
df9 <- read.csv("./Cyclistic Case Study - data/202201-divvy-tripdata.csv")
df10 <- read.csv("./Cyclistic Case Study - data/202202-divvy-tripdata.csv")
df11 <- read.csv("./Cyclistic Case Study - data/202203-divvy-tripdata.csv")
df12 <- read.csv("./Cyclistic Case Study - data/202204-divvy-tripdata.csv")


## ====================================
##  3. combine the data into one file
## ====================================

all_trips <- bind_rows(df1,df2,df3,df4,df5,df6,df7,df8,df9,df10,df11,df12)
str(all_trips)
all_trips <- janitor::remove_empty(all_trips, which = c("cols"))
all_trips <- janitor::remove_empty(all_trips, which = c("rows"))
str(all_trips)
## used str(all_trips) before and after using janitor to see if anything was removed


## ========================
##  4. inspect/clean data
## ========================

## colnames - list of column names
## nrow - how many rows are in dataset
## dim - dimensions of the dataset
## head - see the first 6 rows of dataset
## summary - statistical summary of data (numerics)
colnames(all_trips)
nrow(all_trips)
dim(all_trips)
head(all_trips)
summary(all_trips)


## ======================================================================
##  5. add columns that list the date, month, day and year of each ride
## ======================================================================
## this allows us to aggregate ride data for each month, day, or year ... before completing these operations we could only aggregate at the ride level
## the default format is yyyy-mm-dd
all_trips$date <- as.Date(all_trips$started_at)
all_trips$month <- format(as.Date(all_trips$date), "%m")
all_trips$day <- format(as.Date(all_trips$date), "%d")
all_trips$year <- format(as.Date(all_trips$date), "%Y")
all_trips$day_of_week <- format(as.Date(all_trips$date), "%A")

## add a "ride_length" calculation to all_trips
all_trips$ride_length <- difftime(all_trips$ended_at,all_trips$started_at)
## convert "ride_length" from factor to numeric so we can run calculations on the data
## let the above code run completely before this code can run
is.factor(all_trips$ride_length)
all_trips$ride_length <- as.numeric(as.character(all_trips$ride_length))
## let the above code run completely before this code can run
is.numeric(all_trips$ride_length)

## inspect the structure of the new columns
str(all_trips)

## removing "bad" data; empty rows, negative and zero trip lengths, and na/null values
colSums(is.na(all_trips)) #returns a summary of empty colons on each variable
all_trips <- all_trips [complete.cases(all_trips), ] 
str(all_trips) # dataset trimmed from 5757551 to 5752785

## remove all negative and zero trip length as well ass na/null values
all_trips <- subset(all_trips, ride_length>0)
str(all_trips) # dataset trimmed from 5752785 to 5752133

## convert ride length to integer
all_trips$ride_length <- as.integer(all_trips$ride_length)


## ==========================
##  6. descriptive analysis
## ==========================
## descriptive analysis on ride_length
mean(all_trips$ride_length) #straight average (total ride length/rides)
median(all_trips$ride_length) #midpoint number in the ascending array of ride lengths
max(all_trips$ride_length)  #longest ride
min(all_trips$ride_length)  #shortest ride
summary(all_trips$ride_length)

## max ride_length is 3356649 which is an outlier
## i would assume this could be from bikes that are not returned properly and double check with the manager if this should be included or taken out
table(all_trips$rideable_type)

## compare ride_length and rideable_type
aggregate(all_trips$ride_length ~ all_trips$rideable_type, FUN = mean)
aggregate(all_trips$ride_length ~ all_trips$rideable_type, FUN = median)
aggregate(all_trips$ride_length ~ all_trips$rideable_type, FUN = max)
aggregate(all_trips$ride_length ~ all_trips$rideable_type, FUN = min)

## compare members and casual riders
aggregate(all_trips$ride_length ~ all_trips$member_casual, FUN = mean)
aggregate(all_trips$ride_length ~ all_trips$member_casual, FUN = median)
aggregate(all_trips$ride_length ~ all_trips$member_casual, FUN = max)
aggregate(all_trips$ride_length ~ all_trips$member_casual, FUN = min)

## average ride time by each day for members and casual riders
aggregate(all_trips$ride_length ~ all_trips$member_casual + all_trips$day_of_week, FUN = mean)
all_trips$day_of_week <- ordered(all_trips$day_of_week, levels=c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"))
## adjust to show days of the week in order
aggregate(all_trips$ride_length ~ all_trips$member_casual + all_trips$day_of_week, FUN = mean)


## ===================
##  7. visualization
## ===================
## analyze ridership data by type and weekday
all_trips %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%  #creates weekday field using wday()
  group_by(member_casual, weekday) %>%  #groups by type and weekday
  summarise(number_of_rides = n()  #calculates the number of rides and average duration
            ,average_duration  = mean(ride_length)) %>%  #calculates the average duration
  arrange(member_casual, weekday) %>%  #sorts
  
## visualize the number of rides by rider type
all_trips %>%
  mutate(weekday = wday(started_at, label = TRUE)) %>%
  group_by(member_casual, weekday) %>%
  summarise(number_of_rides = n()
            ,average_duration  = mean(ride_length)) %>%
  arrange(member_casual, weekday) %>%
  ggplot(aes(x = weekday, y = number_of_rides, fill = member_casual)) +
  scale_y_continuous(labels = comma) +
  geom_col(position = "dodge") 

## visualization for average duration
all_trips %>% 
  mutate(weekday = wday(started_at, label = TRUE)) %>% 
  group_by(member_casual, weekday) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual, weekday)  %>% 
  ggplot(aes(x = weekday, y = average_duration, fill = member_casual)) +
  geom_col(position = "dodge")

## analyze data by type and weekday (overall frequency)
all_trips %>% 
  group_by(member_casual) %>% 
  summarise(number_of_rides = n()
            ,average_duration = mean(ride_length)) %>% 
  arrange(member_casual)  %>% 
  ggplot(aes(x = member_casual, y = number_of_rides)) +
  scale_y_continuous(labels = comma) +
  geom_col(position = "dodge")

## =========================
##  8. export summary file
## =========================
## create a csv file that we will visualize in Excel or Tableau
counts <- aggregate(all_trips$ride_length ~ all_trips$member_casual +
                      all_trips$day_of_week, FUN = mean)
write.csv(counts, file = "counts.csv")

## =====
##  end
## =====
